local Players = game:GetService("Players")            
local LocalPlayer = Players.LocalPlayer            
local CoreGui = game:GetService("CoreGui")            
local PathService = game:GetService("PathfindingService")            
            
-- Khởi tạo            
local isControlling = false            
local walkto, autoNearest, checkTeam = false, false, false            
local selectedPlayer, walkLoop, autoLoop, currentTarget = nil, nil, nil, nil            
local lastTargetPos = nil            
            
-- Theo dõi di chuyển tay/phím            
local function bindControlDetection()            
	local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")            
	if not hum then return end            
	hum:GetPropertyChangedSignal("MoveDirection"):Connect(function()            
		isControlling = hum.MoveDirection.Magnitude > 0            
	end)            
end            
LocalPlayer.CharacterAdded:Connect(function() task.wait() bindControlDetection() end)            
if LocalPlayer.Character then bindControlDetection() end            
            
-- Hàm tiện ích            
local function getRoot(char)            
	return char and char:FindFirstChild("HumanoidRootPart")            
end            
            
local function shouldRepath(newPos)            
	if not lastTargetPos then            
		lastTargetPos = newPos            
		return true            
	end            
	local moved = (lastTargetPos - newPos).Magnitude > 2            
	if moved then            
		lastTargetPos = newPos            
	end            
	return moved            
end            
            
-- Đi theo path            
local function pathToLoop(humanoid, targetPlayer, stopCheck)
	local hrp = getRoot(LocalPlayer.Character)
	local targetRoot = getRoot(targetPlayer.Character)
	if not hrp or not targetRoot then return end

	local stuckTime = 0
	local repathCooldown = 0

	while true do
		if stopCheck and stopCheck() then return end
		task.wait(0.1)

		-- Đổi hướng hoặc nhảy nếu cần
		hrp = getRoot(LocalPlayer.Character)
		targetRoot = getRoot(targetPlayer.Character)
		if not hrp or not targetRoot then return end

		local distance = (hrp.Position - targetRoot.Position).Magnitude
		if distance < 8 then continue end

		if tick() < repathCooldown then continue end
		repathCooldown = tick() + 0.5

		local path = PathService:CreatePath({
			AgentRadius = 2,
			AgentHeight = 5,
			AgentCanJump = true,
			AgentCanClimb = true,
			AgentJumpHeight = 25,
			AgentMaxSlope = 75,
		})

		path:ComputeAsync(hrp.Position, targetRoot.Position)
		if path.Status ~= Enum.PathStatus.Success then
			humanoid:MoveTo(targetRoot.Position)
			continue
		end

		for _, wp in ipairs(path:GetWaypoints()) do
			if stopCheck and stopCheck() then return end

			humanoid:MoveTo(wp.Position)
			if wp.Action == Enum.PathWaypointAction.Jump then
				humanoid.Jump = true
			end

			local done = false
			local conn = humanoid.MoveToFinished:Connect(function() done = true end)

			local stuckCheck = hrp.Position
			stuckTime = 0

			while not done and (wp.Position - hrp.Position).Magnitude > 5 do
				task.wait(0.1)
				if stopCheck and stopCheck() then conn:Disconnect() return end

				if (hrp.Position - stuckCheck).Magnitude < 0.1 then
					stuckTime += 0.1
					if stuckTime >= 0.5 then
						humanoid.Jump = true
						stuckTime = 0
					end
				else
					stuckTime = 0
					stuckCheck = hrp.Position
				end

				-- Nếu mục tiêu di chuyển lệch khỏi waypoint
				if (getRoot(targetPlayer.Character).Position - wp.Position).Magnitude > 6 then
					conn:Disconnect()
					break
				end
			end

			conn:Disconnect()
		end
	end
end
            
-- GUI            
pcall(function() CoreGui:FindFirstChild("WalkTo2GUI"):Destroy() end)            
local gui = Instance.new("ScreenGui", CoreGui) gui.Name = "WalkTo2GUI" gui.ResetOnSpawn = false            
            
local toggleBtn = Instance.new("TextButton", gui)            
toggleBtn.Size = UDim2.new(0, 44, 0, 44)            
toggleBtn.Position = UDim2.new(0, 10, 0, 10)            
toggleBtn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)            
toggleBtn.BackgroundTransparency = 0.3            
toggleBtn.TextColor3 = Color3.new(1,1,1)            
toggleBtn.Text = "WalkTo"            
toggleBtn.Active = true            
toggleBtn.Draggable = true            
            
local frame = Instance.new("Frame", gui)            
frame.Size = UDim2.new(0, 200, 0, 190)            
frame.Position = UDim2.new(0, 10, 0.5, -95)            
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)            
frame.Visible = false            
frame.Active = true            
frame.Draggable = true            
            
toggleBtn.MouseButton1Click:Connect(function() frame.Visible = not frame.Visible end)            
            
-- Dropdown chọn player            
local dropdown = Instance.new("TextButton", frame)            
dropdown.Size = UDim2.new(1, 0, 0, 30)            
dropdown.Position = UDim2.new(0, 0, 0, -30)            
dropdown.Text = "Select Player"            
dropdown.BackgroundColor3 = Color3.fromRGB(60, 60, 60)            
dropdown.TextColor3 = Color3.new(1, 1, 1)            
            
local dropdownList = Instance.new("ScrollingFrame", frame)            
dropdownList.Size = UDim2.new(1, 0, 0, 120)            
dropdownList.Position = UDim2.new(0, 0, 0, 0)            
dropdownList.Visible = false            
dropdownList.ScrollBarThickness = 4            
dropdownList.BackgroundColor3 = Color3.fromRGB(50, 50, 50)            
            
dropdown.MouseButton1Click:Connect(function()            
	dropdownList.Visible = not dropdownList.Visible            
end)            
            
local function refreshDropdown()            
	dropdownList:ClearAllChildren()            
	local y = 0            
	for _, plr in ipairs(Players:GetPlayers()) do            
		if plr ~= LocalPlayer then            
			local btn = Instance.new("TextButton", dropdownList)            
			btn.Size = UDim2.new(1, 0, 0, 25)            
			btn.Position = UDim2.new(0, 0, 0, y)            
			btn.Text = plr.Name            
			btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)            
			btn.TextColor3 = Color3.new(1, 1, 1)            
			btn.MouseButton1Click:Connect(function()            
				selectedPlayer = plr            
				dropdown.Text = "Selected: " .. plr.Name            
				dropdownList.Visible = false            
			end)            
			y += 25            
		end            
	end            
	dropdownList.CanvasSize = UDim2.new(0, 0, 0, y)            
end            
            
task.spawn(function()            
	while true do            
		if dropdownList.Visible then refreshDropdown() end            
		task.wait(2)            
	end            
end)            
            
-- WalkTo            
local walkBtn = Instance.new("TextButton", frame)            
walkBtn.Size = UDim2.new(1, 0, 0, 30)            
walkBtn.Position = UDim2.new(0, 0, 0, 110)            
walkBtn.Text = "WalkTo: OFF"            
walkBtn.BackgroundColor3 = Color3.fromRGB(70, 100, 70)            
walkBtn.TextColor3 = Color3.new(1, 1, 1)            
            
walkBtn.MouseButton1Click:Connect(function()            
	walkto = not walkto            
	walkBtn.Text = "WalkTo: " .. (walkto and "ON" or "OFF")            
	if walkLoop then task.cancel(walkLoop) end            
	if not walkto then return end            
            
	walkLoop = task.spawn(function()            
		while walkto do            
			task.wait()            
			local char = LocalPlayer.Character            
			local hum = char and char:FindFirstChildOfClass("Humanoid")            
			local myRoot = getRoot(char)            
			local targetRoot = selectedPlayer and getRoot(selectedPlayer.Character)            
			if hum and myRoot and targetRoot and selectedPlayer then            
				local to = targetRoot.Position            
				if (myRoot.Position - to).Magnitude > 8 and shouldRepath(to) then            
					pathToLoop(hum, selectedPlayer, function() return not walkto or isControlling end)
				end            
			end            
		end            
	end)            
end)            
            
-- AutoNearest            
local autoBtn = Instance.new("TextButton", frame)            
autoBtn.Size = UDim2.new(1, 0, 0, 30)            
autoBtn.Position = UDim2.new(0, 0, 0, 150)            
autoBtn.Text = "AutoNearest: OFF"            
autoBtn.BackgroundColor3 = Color3.fromRGB(100, 70, 70)            
autoBtn.TextColor3 = Color3.new(1, 1, 1)            
            
autoBtn.MouseButton1Click:Connect(function()            
	autoNearest = not autoNearest            
	autoBtn.Text = "AutoNearest: " .. (autoNearest and "ON" or "OFF")            
	if autoLoop then task.cancel(autoLoop) end            
	currentTarget, lastTargetPos = nil, nil            
	if not autoNearest then return end            
            
	autoLoop = task.spawn(function()            
		while autoNearest do            
			task.wait()            
			local char = LocalPlayer.Character            
			local hum = char and char:FindFirstChildOfClass("Humanoid")            
			local myRoot = getRoot(char)            
			if not hum or not myRoot then break end            
            
			-- Chọn mục tiêu nếu chưa có hoặc chết            
			if not currentTarget or not currentTarget.Character            
				or not currentTarget.Character:FindFirstChildOfClass("Humanoid")            
				or currentTarget.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then            
            
				local nearest, minDist = nil, math.huge            
				for _, plr in ipairs(Players:GetPlayers()) do            
					local root = getRoot(plr.Character)            
					local hp = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")            
					if plr ~= LocalPlayer and root and hp and hp.Health > 0 then            
						if checkTeam and plr.Team == LocalPlayer.Team then continue end            
						local dist = (myRoot.Position - root.Position).Magnitude            
						if dist < minDist then            
							minDist = dist            
							nearest = plr            
						end            
					end            
				end            
				currentTarget = nearest            
				lastTargetPos = nil            
			end            
            
			if currentTarget and getRoot(currentTarget.Character) then            
				local to = getRoot(currentTarget.Character).Position            
				if (myRoot.Position - to).Magnitude > 8 and shouldRepath(to) then            
					pathToLoop(hum, currentTarget, function() return not autoNearest or isControlling end)        
				end            
			end            
		end            
	end)            
end)